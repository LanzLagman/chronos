#!/usr/bin/env python
import sys
import argparse
from tqdm import tqdm
import matplotlib.pyplot as pl
import chronos as cr

# import matplotlib
# matplotlib.use("pdf")

parser = argparse.ArgumentParser(description="create tql based on chronos")
parser.add_argument("-gaia", type=int, help="Gaia DR2 ID", default=None)
parser.add_argument("-toi", type=int, help="TOI ID", default=None)
parser.add_argument("-tic", type=int, help="TIC ID", default=None)
parser.add_argument("-n", "--name", type=str, help="target name", default=None)
parser.add_argument(
    "-sec", "--sector", type=int, help="TESS sector", default=None
)
parser.add_argument(
    "-c",
    "--cadence",
    type=str,
    choices=["long", "short"],
    help="30-min long or 2-min short (default)",
    default="short",
)
parser.add_argument(
    "-lc",
    "--lctype",
    type=str,
    help="type of lightcurve",
    choices=["pdcsap", "sap", "custom", "cdips"],
    default=None,
)
parser.add_argument(
    "-m",
    "--sap_mask",
    type=str,
    help="mask type",
    choices=["pipeline", "round", "square", "percentile", "threshold"],
    default=None,
)
parser.add_argument(
    "-thr",
    "--threshold",
    type=float,
    help="mask threshold in sigma",
    default=5,
)
parser.add_argument(
    "-r", "--aper_radius", type=int, help="mask radius in pix", default=1
)
parser.add_argument(
    "-perc", "--percentile", type=float, help="mask percentile", default=90
)
parser.add_argument(
    "-b",
    "--quality_bitmask",
    type=str,
    choices=["none", "default", "hard", "hardest"],
    default="default",
)
parser.add_argument(
    "-size",
    "--cutout_size",
    type=float,
    help="FFI cutout size for long cadence (default=[12,12] pix)",
    default=(12, 12),
)
parser.add_argument(
    "-w",
    "--window_length",
    type=int,
    help="wotan biweight window length (default=0.5 days)",
    default=0.5,
)
parser.add_argument(
    "-e",
    "--edge_cutoff",
    type=int,
    help="cut each edges (default=0.1 days)",
    default=0.1,
)
parser.add_argument(
    "-q",
    "--use_quality_mask",
    action="store_true",
    help="remove cadences in data release notes",
    default=False,
)
parser.add_argument(
    "-per",
    "--period_limits",
    help="period limits in periodogram search (default=[1, 0.5xbaseline])",
    nargs=2,
    type=float,
    default=None,
)
parser.add_argument(
    "-l",
    "--priors",
    action="store_true",
    help="use star priors for detrending and periodogram",
    default=False,
)
parser.add_argument(
    "-g", "--gls", action="store_true", help="run GLS pipeline", default=False
)
parser.add_argument(
    "-f",
    "--find_cluster",
    action="store_true",
    help="find if target in cluster",
    default=False,
)
parser.add_argument(
    "-s",
    "--save",
    action="store_true",
    help="save figure and tls",
    default=False,
)
parser.add_argument(
    "-o", "--outdir", type=str, help="output directory", default="."
)
parser.add_argument(
    "-v", "--verbose", action="store_true", help="show details", default=False
)

args = parser.parse_args()

if __name__ == "__main__":
    fig = cr.make_tql(
        gaiaid=args.gaia,
        toiid=args.toi,
        ticid=args.tic,
        name=args.name,
        sector=args.sector,
        cadence=args.cadence,
        lctype=args.lctype,
        sap_mask=args.sap_mask,
        aper_radius=args.aper_radius,
        threshold_sigma=args.threshold,
        percentile=args.percentile,
        quality_bitmask=args.quality_bitmask,
        apply_data_quality_mask=args.use_quality_mask,
        window_length=args.window_length,
        cutout_size=args.cutout_size,
        Porb_limits=args.period_limits,
        use_star_priors=args.priors,
        edge_cutoff=args.edge_cutoff,
        run_gls=args.gls,
        find_cluster=args.find_cluster,
        savefig=args.save,
        savetls=args.save,
        outdir=args.outdir,
        verbose=args.verbose,
        clobber=False,
    )
    if not args.save:
        pl.show()
    pl.close()
