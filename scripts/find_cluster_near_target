#!/usr/bin/env python
"""
Find the nearest cluster to target and optionally show cluster membership plots

See outlier rejection here:
https://scikit-learn.org/stable/auto_examples/plot_anomaly_comparison.html#sphx-glr-auto-examples-plot-anomaly-comparison-py
"""
from os.path import join
from argparse import ArgumentParser

import matplotlib.pyplot as pl

import chronos as cr

if __name__ == "__main__":
    ap = ArgumentParser()
    ap.add_argument("gaiaid", type=int, help="target Gaia DR2 id")
    ap.add_argument(
        "-m",
        "--no-match-id",
        help="do not match Gaia DR2 id",
        action="store_false",
        default=True,
    )
    ap.add_argument(
        "-cc",
        "--cluster",
        help="cluster name where to check target membership",
        default=False,
    )
    ap.add_argument("-v", "--verbose", action="store_true", default=False)
    ap.add_argument("-c", "--clobber", action="store_true", default=False)
    ap.add_argument(
        "-r", "--radius", type=float, default=3, help="query radius in arcsec"
    )
    ap.add_argument(
        "-p",
        "--show-plot",
        action="store_true",
        default=False,
        help="show cluster plots",
    )
    ap.add_argument(
        "-s", "--save", action="store_true", default=False, help="save figures"
    )
    ap.add_argument(
        "-o",
        "--outdir",
        type=str,
        default=cr.DATA_PATH,
        help="output directory",
    )
    args = ap.parse_args()

    t = cr.Target(gaiaDR2id=args.gaiaid, verbose=args.verbose)
    # query gaia to populate target parameters including its distance
    df_gaia = t.query_gaia_dr2_catalog(
        radius=args.radius, return_nearest_xmatch=True
    )

    if args.cluster:
        c = cr.Cluster(cluster_name=args.cluster, verbose=args.verbose)
        df_mem = c.query_cluster_members()
    else:
        df_mem = None

    s = t.find_nearest_cluster_member(df=df_mem, match_id=args.no_match_id)

    # update members
    df_mem = t.nearest_cluster_members

    # print parameters of matched cluster member
    if (args.verbose is False) and (args.show_plot is False):
        print(s)

    if args.save or args.show_plot:
        # HR diagram
        matched_cname = str(t.nearest_cluster_name).lower()
        if (len(matched_cname) == 0) or (matched_cname == "nan"):
            raise ValueError(f"nearest cluster match is NaN")

        #
        c = cr.Cluster(
            cluster_name=t.nearest_cluster_name, verbose=args.verbose
        )
        # query radial_velocity for each star from gaia dr2 catalog

        df_mem_gaia_params = c.query_cluster_members_gaia_params(
            df=df_mem, gmag_cut=None, clobber=args.clobber
        )
        fig1 = cr.plot_cmd(df=df_mem_gaia_params, target_gaia_id=t.gaiaid)
        fig1.axes[0].set_title(t.nearest_cluster_name)
        if args.save:
            fp1 = join(args.outdir, f"{s.Cluster}_hrd.png")
            fig1.savefig(fp1)
            print(f"Saved: {fp1}")

        fig2 = cr.plot_rdp_pmrv(df=df_mem_gaia_params, target_gaia_id=t.gaiaid)
        fig2.suptitle(t.nearest_cluster_name)
        if args.save:
            fp2 = join(args.outdir, f"{s.Cluster}_kinematics.png")
            fig2.savefig(fp2)
            print(f"Saved: {fp2}")

        fig3 = cr.plot_xyz_uvw(
            df=df_mem_gaia_params,
            target_gaia_id=t.gaiaid,
            verbose=args.verbose,
        )
        fig3.suptitle(t.nearest_cluster_name)
        if args.save:
            fp3 = join(args.outdir, f"{s.Cluster}_xyz_uvw.png")
            fig3.savefig(fp3)
            print(f"Saved: {fp3}")

        if args.show_plot:
            pl.show()
