#!/usr/bin/env python
"""
UNDER DEVELOPMENT:
Find the nearest cluster to target and optionally show cluster membership plots

See outlier rejection here:
https://scikit-learn.org/stable/auto_examples/plot_anomaly_comparison.html#sphx-glr-auto-examples-plot-anomaly-comparison-py
"""
from os.path import join
from argparse import ArgumentParser
import numpy as np
import matplotlib.pyplot as pl
import chronos as cr

if __name__ == "__main__":
    ap = ArgumentParser()
    ap.add_argument("-toi", "--toiid", type=int, help="TOI id", default=None)
    ap.add_argument(
        "-g", "--gaiaid", type=int, help="target Gaia DR2 id", default=None
    )
    ap.add_argument(
        "-i",
        "--ignore-gaiaid",
        help="match Gaia DR2 id; use -i to ignore gaiaid",
        action="store_true",
        default=False,
    )
    ap.add_argument(
        "-c",
        "--cluster",
        help="cluster name where to check target membership",
        default=None,
    )
    ap.add_argument(
        "-cc",
        "--catalog",
        help="cluster catalog name",
        default="CantatGaudin2020",
    )
    ap.add_argument("-v", "--verbose", action="store_true", default=False)
    ap.add_argument("--clobber", action="store_true", default=False)
    ap.add_argument(
        "-r", "--radius", type=float, default=3, help="query radius in arcsec"
    )
    ap.add_argument(
        "-p",
        "--show-plot",
        action="store_true",
        default=False,
        help="show cluster plots",
    )
    ap.add_argument(
        "-s", "--save", action="store_true", default=False, help="save figures"
    )
    ap.add_argument(
        "-o",
        "--outdir",
        type=str,
        default=cr.DATA_PATH,
        help="output directory",
    )
    args = ap.parse_args()
    if (args.toiid is None) and (args.gaiaid is None):
        raise ValueError("Provide -toi or -gaia")
    if args.gaiaid:
        t = cr.Target(gaiaDR2id=args.gaiaid, verbose=args.verbose)
    else:
        t = cr.Target(toiid=args.toiid, verbose=args.verbose)
    # query gaia to populate target parameters including its distance
    df_gaia = t.query_gaia_dr2_catalog(
        radius=args.radius, return_nearest_xmatch=True
    )

    if args.cluster is None:
        cluster_info, idxs = t.get_cluster_membership(
            catalog_name=args.catalog, return_idxs=True, frac=0.5, sigma=5
        )
        if cluster_info is None:
            raise ValueError("Target is unlikely a cluster member.")
        cluster_name = cluster_info.Cluster
    else:
        cluster_name = args.cluster

    # print parameters of matched cluster member
    if (args.verbose is False) and (args.show_plot is False):
        print(cluster_info)

    c = cr.Cluster(cluster_name=cluster_name)
    df_target = t.query_gaia_dr2_catalog(return_nearest_xmatch=True)
    if np.isnan(df_target.radial_velocity):
        rv = np.nanmean(list(t.query_vizier_param("RV").values()))
        if not np.isnan(rv):
            df_target.radial_velocity = rv

    if args.save or args.show_plot:
        # HR diagram
        matched_cname = str(t.nearest_cluster_name).lower()
        if (len(matched_cname) == 0) or (matched_cname == "nan"):
            raise ValueError(f"nearest cluster match is NaN")

        ax = c.plot_cmd(
            target_gaiaid=t.gaiaid, df_target=df_target, match_id=False
        )
        ax.set_title(f"TOI {t.toiid} in {c.cluster_name}")
        if args.save:
            fp1 = join(args.outdir, f"{cluster_name}_hrd.png")
            ax.figure.savefig(fp1)
            print(f"Saved: {fp1}")

        fig2 = c.plot_rdp_pmrv(
            target_gaiaid=t.gaiaid, df_target=df_target, match_id=False
        )
        fig2.suptitle(f"TOI {t.toiid} in {c.cluster_name}")
        if args.save:
            fp2 = join(args.outdir, f"{cluster_name}_kinematics.png")
            fig2.savefig(fp2)
            print(f"Saved: {fp2}")

        fig3 = c.plot_xyz_uvw(
            target_gaiaid=t.gaiaid, df_target=df_target, match_id=False
        )

        fig3.suptitle(f"TOI {t.toiid} in {c.cluster_name}")
        if args.save:
            fp3 = join(args.outdir, f"{cluster_name}_xyz_uvw.png")
            fig3.savefig(fp3)
            print(f"Saved: {fp3}")

        if args.show_plot:
            pl.show()
